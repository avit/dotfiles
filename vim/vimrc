" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Load pathogen plugins
call pathogen#infect()
call pathogen#helptags()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" BASIC EDITING CONFIGURATION
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" , is the leader character (Default \)
let mapleader = ","

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" use the system clipboard for copy/paste
set clipboard+=unnamed

" Store temporary files in a central spot
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

set hidden " allow unsaved background buffers and remember marks/undo for them
set history=1000	" keep 50 lines of command line history

set showtabline=2 " always show tabline
set laststatus=2  " Always display the status line
set ruler		      " show the cursor position all the time
set showcmd		    " display selected command movements in status line
set cursorline    " highlight current line

" Show line numbers
set number numberwidth=5

set winwidth=79   " Minimum width for current window
set scrolloff=3   " Show minimum lines around current line when scrolling
set sidescrolloff=8 " Show minimum chars to right of cursor when scrolling

set incsearch		  " do incremental searching
set hlsearch      " highlight last search results

" case only matters with mixed case expressions
set ignorecase smartcase

" Soft tabs, 2 spaces
set tabstop=2 shiftwidth=2
set expandtab     " Expand tabs to spaces
set autoindent		" always set autoindenting on
set nowrap        " Switch wrap off for everything

" Tab completion options
" (only complete to the longest unambiguous match, and show a menu)
set completeopt=longest,menu
set wildmode=longest,full
set wildmenu
set complete=.,t  " Complete from current buffer and tags

" set foldenable
set foldmethod=syntax
set foldlevel=1
set foldnestmax=2

" Enable file type detection.
filetype plugin indent on

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COLOR SCHEME
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:solarized_termcolors = 256
let g:solarized_termtrans = 1
let g:solarized_bold = 1
let g:solarized_underline = 1
let g:solarized_italic = 1
let g:solarized_contrast = "normal"
let g:solarized_visibility = "normal"

" Switch syntax highlighting on, when the terminal has colors
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax enable
  set background=dark
  colorscheme solarized
endif

if (has("gui_running"))
  set transparency=6
endif

highlight Normal guibg=#2c2c2c
highlight CursorLine guibg=#393939

highlight Search gui=underline guifg=NONE guibg=Black guisp=Red
highlight Search cterm=underline ctermfg=NONE ctermbg=Black
highlight IncSearch gui=reverse
highlight IncSearch cterm=reverse

highlight Folded gui=italic
highlight Folded cterm=italic guibg=Black
highlight FoldColumn guifg=Yellow

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" STATUS LINE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
:set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CUSTOM AUTOCMDS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

augroup vimrcEx
  " Remove all autocommands for the current group
  autocmd!

  " Jump to last cursor position unless it's invalid or in an event handler
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Set File type to 'text' for files ending in .txt
  autocmd BufNewFile,BufRead *.txt
    \ setfiletype text

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text
    \ setlocal textwidth=78

  " Enable soft-wrapping for text files
  autocmd FileType text,markdown,html,xhtml,eruby
    \ setlocal wrap linebreak nolist

  " Use 4 spaces for python indentation
  autocmd FileType python
    \ setlocal shiftwidth=4 softtabstop=4 expandtab

  autocmd BufRead,BufNewFile *.sass
    \ setfiletype sass

  autocmd BufRead *.mkd,*.markdown
    \ set autoindent formatoptions=tcroqn2 comments=n:&gt;

  " Indent p tags
  autocmd FileType html,eruby
    \ if g:html_indent_tags !~ '\\|p\>' |
    \   let g:html_indent_tags .= '\|p\|li\|dt\|dd' |
    \ endif

  " Use rspec compiler for autotest on spec files
  autocmd BufNewFile,BufRead *_spec.rb compiler rspec

  " Strip trailing whitespace
  autocmd BufWritePre * call StripTrailingWhitespace()

  " Ignore listed file types for sensitive trailing whitespace
  autocmd FileType markdown let b:noStripWhitespace=1

  " Automatically reload .vimrc source when saved
  autocmd BufWritePost .vimrc source $MYVIMRC
augroup END

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" STRIP TRAILING WHITESPACE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! StripTrailingWhitespace()
  " Only strip if the b:noStripeWhitespace variable isn't set
  if exists('b:noStripWhitespace')
    return
  endif
  %s/\s\+$//e
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MISC KEY MAPS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Use Ctrl-C to escape from insert mode
imap <c-c> <esc>

" Jump to previous buffer
nnoremap <leader><leader> <c-^>

" Hide search highlighting when pressing return
nnoremap <CR> :nohlsearch<CR>

" Toggle search highlighting
noremap <Leader>h :set invhlsearch<CR>

" Yank to system clipboard
map <leader>y "*y

" Move around splits with <c-hjkl>
" nnoremap <c-j> <c-w>j
" nnoremap <c-k> <c-w>k
" nnoremap <c-h> <c-w>h
" nnoremap <c-l> <c-w>l

" Change MakeGreen default keybinding from <Leader>t
map <Leader>mg <Plug>MakeGreen

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" EDITING
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Move lines up and down
map <C-K> :m -2 <CR>
map <C-J> :m +1 <CR>

" Duplicate a selection
" Visual mode: D
vmap D y'>p

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" FILE NAVIGATION
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Press ^F from insert mode to insert the current file name
imap <C-F> <C-R>=expand("%")<CR>

" Opens an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Opens a tab edit command with the path of the currently edited file filled in
" Normal mode: <Leader>t
map <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MAPS TO JUMP TO SPECIFIC COMMAND-T TARGETS AND FILES
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>gr :topleft :split config/routes.rb<cr>
function! ShowRoutes()
  " Requires 'scratch' plugin
  :topleft 100 :split __Routes__
  " Make sure Vim doesn't write __Routes__ as a file
  :set buftype=nofile
  " Delete everything
  :normal 1GdG
  " Put routes output in buffer
  :0r! rake -s routes
  " Size window to number of lines (1 plus rake output length)
  :exec ":normal " . line("$") . "_ "
  " Move cursor to bottom
  :normal 1GG
  " Delete empty trailing line
  :normal dd
endfunction
map <leader>gR :call ShowRoutes()<cr>
map <leader>gv :CommandTFlush<cr>\|:CommandT app/views<cr>
map <leader>gc :CommandTFlush<cr>\|:CommandT app/controllers<cr>
map <leader>gm :CommandTFlush<cr>\|:CommandT app/models<cr>
map <leader>gh :CommandTFlush<cr>\|:CommandT app/helpers<cr>
map <leader>gl :CommandTFlush<cr>\|:CommandT lib<cr>
map <leader>gp :CommandTFlush<cr>\|:CommandT public<cr>
map <leader>gs :CommandTFlush<cr>\|:CommandT public/stylesheets/sass<cr>
map <leader>gf :CommandTFlush<cr>\|:CommandT features<cr>
map <leader>gg :topleft 100 :split Gemfile<cr>
map <leader>gt :CommandTFlush<cr>\|:CommandTTag<cr>
map <leader>f :CommandTFlush<cr>\|:CommandT<cr>
map <leader>F :CommandTFlush<cr>\|:CommandT %%<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" OPEN FILES IN DIRECTORY OF CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>e :edit %%
map <leader>v :view %%

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
map <leader>n :call RenameFile()<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COMMANDS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Open URL
command! -bar -nargs=1 OpenURL :!open <args>
function! OpenURL()
  let s:uri = matchstr(getline("."), '[a-z]*:\/\/[^ >,;:]*')
  echo s:uri
  if s:uri != ""
	  exec "!open \"" . s:uri . "\""
  else
	  echo "No URI found in line."
  endif
endfunction
map <Leader>w :call OpenURL()<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" LOCAL CONFIG
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Use Ack instead of Grep when available
if executable("ack")
  set grepprg=ack\ -H\ --nogroup\ --nocolor\ --ignore-dir=tmp\ --ignore-dir=coverage
endif

if filereadable(".vimrc.local")
  source .vimrc.local
endif

